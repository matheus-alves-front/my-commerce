generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id              String           @id @default(uuid())
  name            String
  description     String?
  owner           User             @relation(fields: [ownerId], references: [id], name: "StoreOwner")
  ownerId         String
  settings        StoreSettings?

  categories      Category[]
  products        Product[]
  orders          Order[]
  paymentMethods  PaymentMethod[]
  shippingMethods ShippingMethod[]
  coupons         Coupon[]
  banners         Banner[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Banner {
  id        String    @id @default(uuid())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   String
  title     String
  imageUrl  String
  linkUrl   String?
  isActive  Boolean   @default(true)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StoreSettings {
  id           String   @id @default(uuid())
  store        Store    @relation(fields: [storeId], references: [id])
  storeId      String   @unique
  theme        String
  currency     String   @default("USD")
  language     String   @default("en")
  customStyles Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  ADMIN
  ADMIN_OWNER
  USER
  HOST
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  ownedStores   Store[]        @relation("StoreOwner")
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Customer {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Address {
  id             String   @id @default(uuid())
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     String
  fullName       String
  street         String
  number         String
  complement     String?
  neighborhood   String
  city           String
  state          String
  postalCode     String
  country        String
  phone          String
  isDefault      Boolean  @default(false)
  shippingOrders Order[]  @relation("OrderShippingAddress")
  billingOrders  Order[]  @relation("OrderBillingAddress")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ShippingMethod {
  id           String   @id @default(uuid())
  store        Store    @relation(fields: [storeId], references: [id])
  storeId      String
  name         String
  description  String?
  price        Float
  deliveryTime String
  isActive     Boolean  @default(true)
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id         String           @id @default(uuid())
  user       User?            @relation(fields: [userId], references: [id])
  userId     String?
  customer   Customer?        @relation(fields: [customerId], references: [id])
  customerId String?
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
}

// COMMERCE

model Category {
  id          String     @id @default(uuid())
  store       Store      @relation(fields: [storeId], references: [id])
  storeId     String
  name        String
  description String?
  slug        String     @unique
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryParent")
  products    Product[]  @relation("ProductCategories")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  store       Store       @relation(fields: [storeId], references: [id])
  storeId     String
  name        String
  description String?
  slug        String      @unique
  price       Float
  salePrice   Float?
  sku         String      @unique
  stock       Int
  categories  Category[]  @relation("ProductCategories")
  images      Image[]
  attributes  Attribute[]
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[] // Campo adicionado para a relação inversa
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model AttributeType {
  id          String      @id @default(uuid())
  name        String
  type        String
  attributes  Attribute[]
}

model Attribute {
  id        String  @id @default(uuid())
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  attributeTypeId String
  attributeType AttributeType @relation(fields: [attributeTypeId], references: [id])  
}

model Review {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  rating     Int
  title      String?
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Cart {
  id         String     @id @default(uuid())
  customer   Customer   @relation(fields: [customerId], references: [id])
  customerId String     @unique
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  addedAt   DateTime @default(now())
}

model Order {
  id                String         @id @default(uuid())
  store             Store          @relation(fields: [storeId], references: [id])
  storeId           String
  customer          Customer       @relation(fields: [customerId], references: [id])
  customerId        String
  orderItems        OrderItem[]
  totalAmount       Float
  status            OrderStatus    @default(PENDING)
  paymentStatus     PaymentStatus  @default(PENDING)
  paymentMethod     PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   String
  shippingMethod    ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  String
  shippingAddress   Address        @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress    Address        @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String
  payment           Payment?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model OrderItem {
  id          String  @id @default(uuid())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product @relation(fields: [productId], references: [id])
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Payment {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  method        String
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model PaymentMethod {
  id          String   @id @default(uuid())
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     String
  name        String
  description String?
  isActive    Boolean  @default(true)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Coupon {
  id            String       @id @default(uuid())
  store         Store        @relation(fields: [storeId], references: [id])
  storeId       String
  code          String       @unique
  description   String?
  discountType  DiscountType
  discountValue Float
  startDate     DateTime?
  endDate       DateTime?
  usageLimit    Int?
  usedCount     Int          @default(0)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
